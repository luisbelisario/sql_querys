CREATE DATABASE LIVRARIA;

USE LIVRARIA;

CREATE TABLE LIVROS(
    NOME_LIVRO VARCHAR(30),
    NOME_AUTOR VARCHAR(30),
    SEXO_AUTOR CHAR(1),
    NUM_PAGINAS VARCHAR(5),
    NOME_EDITORA VARCHAR(30),
    VALOR_LIVRO DECIMAL(15, 2),
    UF_EDITORA CHAR(2),
    ANO_PUBLICACAO VARCHAR(4)
);

INSERT INTO LIVROS VALUES('Caveleiro Real','Ana Claudia','F','465','Atlas',49.9,'2009');

INSERT INTO LIVROS VALUES('SQL para leigos','João Nunes','M','450','Addison',98,'SP','2018'),
('Receitas Caseiras','Celia Tavares','F','210','Atlas',45,'RJ', 2008),
('Pessoas Efetivas','Eduardo Santos','M','390','Beta',78.99,'RJ','2018'),
('Habitos Saudáveis','Eduardo Santos','M','630','Beta',150.98,'RJ','2019'),
('A Casa Marrom','Hermes Macedo','M','250','Bubba',60,'MG','2016'),
('Estacio Querido','Geraldo Francisco','M','310','Insignia',100,'ES','2015'),
('Pra sempre amigas','Leda Silva','F','510','Insignia',78.98,'ES','2011'),
('Copas Inesqueciveis','Marco Alcantara','M','200','Larson',130.98,'RS','2018'),
('O poder da mente','Clara Mafra','F','120','Continental',56.58,'SP','2017');


SELECT * FROM LIVROS;

SELECT NOME_LIVRO, NOME_EDITORA FROM LIVROS;

SELECT NOME_LIVRO, UF_EDITORA, SEXO_AUTOR FROM LIVROS WHERE SEXO_AUTOR = 'M';

SELECT NOME_LIVRO, NUM_PAGINAS, SEXO_AUTOR FROM LIVROS WHERE SEXO_AUTOR = 'F';

SELECT VALOR_LIVRO FROM LIVROS WHERE UF_EDITORA = 'SP';

SELECT * FROM LIVROS WHERE SEXO_AUTOR = 'M' AND (UF_EDITORA = 'SP' OR UF_EDITORA = 'RJ');

/* TRABALHANDO COM OPERADORES LÓGICOS */

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'M' OR ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'M' AND ENDERECO LIKE '%RJ';

/*  FUNÇÕES DE AGREGAÇÃO */

SELECT COUNT(*) FROM CLIENTE;

/* OPERADOR GROUPBY */

SELECT SEXO, COUNT(*) FROM CLIENTE GROUP BY SEXO;

/* PERFORMANCE COM OPERADORES LÓGICOS */

/* 1 MILHAO DE REGISTROS

PARA CONTAR
SELECT COUNT(*) FROM CLIENTE;

SELECT SEXO, COUNT(*) FROM CLIENTE
GROUP BY SEXO;

SELECT CIDADE, COUNT(*) FROM CLIENTE
GROUP BY CIDADE;

CONDICAO
SEXO = F
CIDADE = RIO DE JANEIRO

SITUACAO - TRATANDO COM OU / OR
PRIMEIRO TRAGO OS DADOS COM MAIS REGISTROS VERDADEIROS
PORQUE NO 'OR' BASTA UMA SER V PARA TUDO SER V
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE SEXO = 'F'
OR CIDADE = 'RIO DE JANEIRO';

SITUACAO - TRATANDO COM E / AND
PRIMEIRO TRAGO OS DADOS COM MENOS REGISTROS VERDADEIROS
PORQUE NO 'AND' AMBOS DEVEM SER V PARA TUDO SER V
AO ELIMINAR LOGO OS F DESAFOGO O BANCO
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE CIDADE = 'RIO DE JANEIRO'
AND SEXO = 'F'; */

/* DATABASE COMERCIO */

CREATE DATABASE COMERCIO;

USE COMERCIO;

DROP TABLE CLIENTE;
/* ESSE COMANDO APAGA UMA TABELA DO BANCO */

CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    CPF VARCHAR(15) UNIQUE,
    SEXO ENUM('M', 'F') NOT NULL,
    EMAIL VARCHAR(50) UNIQUE
);

CREATE TABLE ENDERECO(
    IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
    RUA VARCHAR(30) NOT NULL,
    BAIRRO VARCHAR(30) NOT NULL,
    CIDADE VARCHAR(30) NOT NULL,
    ESTADO CHAR(2) NOT NULL,
    ID_CLIENTE INT UNIQUE,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE(IDCLIENTE)
);

/* A FK ID_CLIENTE É UNIQUE PORQUE UM CLIENTE SÓ PODE TER UM ENDEREÇO */

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
    TIPO_TELEFONE ENUM('RES', 'COM', 'CEL') NOT NULL,
    NUMERO VARCHAR(10) NOT NULL,
    ID_CLIENTE INT,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE(IDCLIENTE)
);

/* 
CHAVE ESTRANGEIRA (FK) É A CHAVE PRIMÁRIA DE UMA TABELA
QUE VAI ATÉ A OUTRA TABELA PARA FAZER REFERÊNCIA ENTRE
REGISTROS. A POSIÇÃO DA FK DEPENDE DA CARDINALIDADE.

EM RELACIONAMENTOS 1X1 A FK FICA NA TABELA MAIS FRACA 
(O CONCEITO DE MAIS FRACA VAI DEPENDER DO CASO CONCRETO)

EM RELACIONAMENTOS 1XN A FK FICA NA TABEL COM CARDINALIDADE N
*/

/* INSERINDO DADOS NA TABELA CLIENTE */

INSERT INTO CLIENTE VALUES(NULL,'MAFRA','M','MAFRA@GMAIL.COM','34567890');
INSERT INTO CLIENTE VALUES(NULL,'CARLOS','M','CARLOSA@IG.COM','5464553466');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F','ANA@IG.COM','456545678');
INSERT INTO CLIENTE VALUES(NULL,'CLARA','F',NULL,'5687766856');
INSERT INTO CLIENTE VALUES(NULL,'JORGE','M','JORGE@IG.COM','8756547688');
INSERT INTO CLIENTE VALUES(NULL,'CELIA','M','JCELIA@IG.COM','5767876889');

/* INSERINDO DADOS NA TABELA ENDERECO - RELACIONAMENTO 1X1 */

INSERT INTO ENDERECO VALUES(NULL, 'RUA DOS ANZOIS', 'CENTRO', 'BELO HORIZONTE', 'MG', 2);
INSERT INTO ENDERECO VALUES(NULL, 'RUA DAS ORQUIDEAS', 'NOIVOS', 'TERESINA', 'PI', 1);
INSERT INTO ENDERECO VALUES(NULL, 'RUA EPAMINONDAS', 'LAPA', 'RIO DE JANEIRO', 'RJ', 3);
INSERT INTO ENDERECO VALUES(NULL, 'RUA AUGUSTA', 'JARDINS', 'SÃO PAULO', 'SP', 4);
INSERT INTO ENDERECO VALUES(NULL, 'RUA SETE', 'MORADA DO SOL', 'TERESINA', 'PI', 5);
INSERT INTO ENDERECO VALUES(NULL, 'RUA JANUARIO', 'VARJOTA', 'FORTALEZA', 'CE', 6);
INSERT INTO ENDERECO VALUES(NULL, 'RUA COPPER LEAF', 'WILLIANSBURG', 'KITCHENER', 'KT', 7);

/* INSERINDO DADOS NA TABELA TELEFONE - RELACIONAMENTO 1XN */

INSERT INTO TELEFONE VALUES(NULL, 'CEL', '(86)99876-3254', 1);
INSERT INTO TELEFONE VALUES(NULL, 'RES', '(86)3214-1456', 1);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '(86)9995-3142', 2);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '(86)99656-3155', 4);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '(86)99991-1345', 6);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '(86)99876-3155', 7);


/* PROJEÇAO, SELEÇAO E JUNÇAO */

/* PROJEÇAO - É TUDO QUE VAI SER MOSTRADO NA TELA 
NÃO NECESSARIAMENTE PRECISA SER ALGO QUE EXISTA 
NAS TABELAS */

SELECT NOW() AS DATA_ATUAL;

SELECT 2 + 2 AS SOMA;

SELECT 2 + 2 AS SOMA, NOME, NOW()
FROM CLIENTE;


/* SELEÇAO - É UM SUBCONJUNTO DO CONJUNTO TOTAL DE
REGISTROS DE UMA TABELA. A CLAUSULA DE SELEÇAO
É O WHERE */

SELECT NOME, SEXO, EMAIL /* PROJECAO */
FROM CLIENTE /* ORIGEM */
WHERE SEXO = 'F'; /* SELECAO */

SELECT NUMERO /* PROJECAO */
FROM TELEFONE /* ORIGEM */
WHERE TIPO = 'CEL'; /* SELECAO */

/* JUNCAO (JOIN) -  */

SELECT NOME, EMAIL, IDCLIENTE
FROM CLIENTE;

SELECT ID_CLIENTE, BAIRRO, CIDADE
FROM ENDERECO;

/* EXEMPLO DO MAFRA */
+--------+----------------+-----------+
| NOME   | EMAIL          | IDCLIENTE |
+--------+----------------+-----------+
| JOAO   | JOAOA@IG.COM   |         1 |
| CARLOS | CARLOSA@IG.COM |         2 |
| ANA    | ANA@IG.COM     |         3 |
| CLARA  | NULL           |         4 |
| JORGE  | JORGE@IG.COM   |         5 |
| CELIA  | JCELIA@IG.COM  |         6 |
+--------+----------------+-----------+

+------------+----------+----------------+
| ID_CLIENTE | BAIRRO   | CIDADE         |
+------------+----------+----------------+
|          4 | CENTRO   | B. HORIZONTE   |
|          1 | CENTRO   | RIO DE JANEIRO |
|          3 | JARDINS  | SAO PAULO      |
|          2 | ESTACIO  | RIO DE JANEIRO |
|          6 | FLAMENGO | RIO DE JANEIRO |
|          5 | CENTRO   | VITORIA        |
+------------+----------+----------------+

/* ESSE COMANDO DÁ CERTO MAS É CONCEITUALMENTE ERRADO */
SELECT NOME, SEXO, BAIRRO, CIDADE
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE;

/* USANDO O JOIN */
SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJECAO */
FROM CLIENTE /* ORIGEM */
    INNER JOIN ENDERECO /* JUNCAO */
    ON IDCLIENTE = ID_CLIENTE; 

/* USANDO O JOIN COM FILTRO DE SELECAO */
SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJECAO */
FROM CLIENTE /* ORIGEM */
    INNER JOIN ENDERECO /* JUNCAO */
    ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'; /* SELECAO */

/* USANDO O JOIN ENTRE AS TABELAS CLIENTE E TELEFONE */
SELECT NOME, SEXO, EMAIL, TIPO, NUMERO
FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE;


/* JUNTANDO MAIS DE DUAS TABELAS - INNER JOIN 
OBS.: PODEMOS JUNTAR QUANTAS TABELAS QUISERMOS. 
O USO DO JOIN É IRRESTRITO. PARA FAZER UM MULTIPLO
JOIN TENHO QUE USAR PONTEIRAMENTO, CONFORME MOSTRADO
ABAIXO. */
SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
    INNER JOIN ENDERECO
    ON CLIENTE.IDLCIENTE = ENDERECO.ID_CLIENTE
    INNER JOIN TELEFONE
    ON CLIENTE.IDCLIENTE = TELEFONE.ID_TELEFONE;


/* TAMBEM POSSO FAZER PONTEIRAMENTO USANDO ALIASES.
O USO DE ALIASES E PONTEIRAMENTO AJUDA NA PERFOMANCE DO BANCO */
SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE;

/*
    DML - DATA MANIPULATION LANGUAGE
    DDL - DATA DEFINITON LANGUAGE
    DCL - DATA CONTROL LANGUAGE
    TCL - TRANSACTION CONTROL LANGUAGE
*/

/* DML - DATA MANIPULATION LANGUAGE
    INSERT...
    SELECT * FROM CLIENTE;
    UPDATE... OBS.: SEMPRE FAZER UM SELECT ANTES DE FAZER UPDATE!!!
    UPDATE CLIENTE
    SET SEXO = 'F'
    WHERE IDCLIENTE = 7;
    DELETE... OBS.: SEMPRE FAZER UM SELECT ANTES DE FAZER UPDATE!!!
    DELETE FROM CLIENTE
    WHERE IDCLIENTE = 8;
*/

/* DDL - DATA DEFINITION LANGUAGE 
    CREATE TABLE...
    ALTER TABLE...
    CHANGE (ALTERA NOME DA COLUNA E TIPO)
    MODIFY (ALTERA APENAS O TIPO E DETALHES DO TIPO)
    ADD...
    DROP COLUMN...
*/

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME_PRODUTO VARCHAR(30) NOT NULL,
    PRECO DECIMAL(15, 2) NOT NULL,
    FRETE DECIMAL(15, 2) NOT NULL
);

/* ALTERANDO O NOME DE UMA COLUNA */
ALTER TABLE PRODUTO
CHANGE PRECO VALOR_UNITARIO DECIMAL(15, 2) NOT NULL;

ALTER TABLE PRODUTO
MODIFY NOME_PRODUTO NOME VARCHAR(50) NOT NULL;

/* ADICIONANDO COLUNAS */
ALTER TABLE PRODUTO
ADD PESO FLOAT(10, 2) NOT NULL;

/* APAGANDO COLUNAS */
ALTER TABLE PRODUTO
DROP COLUMN PESO;

/* ADICIONANDO COLUNA EM POSIÇÃO ESPECÍFICA 
OBS.: POR PADRÃO AS COLUNAS NOVAS SÃO ADICIONADAS NO FIM DA TABELA */
ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10, 2) NOT NULL
AFTER NOME;

/* ADICIONANDO NA PRIMEIRA POSIÇÃO DA TABELA */
ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10, 2) NOT NULL
FIRST;

/* EXERCICIO 
    RELATORIO GERAL DE TODOS OS CLIENTES
    RELATORIO DE HOMENS
    RELATORIO DE MULHERES
    QUANTIDADE DE HOMENS E MULHERES
    IDS E EMAIL DAS MULHERES QUE MOREM NO CENTRO DO RIO DE JANEIRO E 
    NAO TENHAM CELULAR
*/

/* RELATORIO GERAL DE TODOS OS CLIENTES */
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF,
       E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO,
       T.NUMERO, T.TIPO
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE;


/* RELATORIO DE HOMENS */
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF,
        E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO,
        T.NUMERO, T.TIPO
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE
WHERE C.SEXO = 'M';

/* FAZENDO UPDATE PELOS IDS - 6 11 12 13 17 18 */
/* O OPERADOR IN PERMITE ESPECIFICAR VÁRIOS REGISTROS */
SELECT * FROM CLIENTE
WHERE IDCLIENTE IN(6,11,12,13,17,18);

UPDATE CLIENTE SET SEXO = 'F'
WHERE IDCLIENTE IN(6,11,12,13,17,18);

SELECT * FROM CLIENTE
WHERE SEXO = 'M';

/* RELATORIO DE MULHERES */
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, T.NUMERO, T.TIPO
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE
WHERE C.SEXO = 'F';

UPDATE CLIENTE SET SEXO = 'M'
WHERE IDCLIENTE = 15;

/* QUANTIDADE DE HOMENS E MULHERES */
/* DEVO AGRUPAR POR AQUILO QUE NÃO ESTÁ SENDO CONTADO */
SELECT SEXO, COUNT(*) AS QUANTIDADE FROM CLIENTE GROUP BY SEXO;

/* IDS E EMAIL DAS MULHERES QUE MOREM NO CENTRO DO RIO DE JANEIRO E NAO TENHAM CELULAR */
SELECT C.IDCLIENTE, C.EMAIL, C.NOME, C.SEXO,
        E.BAIRRO, E.CIDADE, E.ESTADO,
        T.TIPO
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE
WHERE (C.SEXO = 'F' AND E.BAIRRO = 'CENTRO' AND E.CIDADE = 'RIO DE JANEIRO')
AND T.TIPO != 'CEL';

/* PARA UMA CAMPANHA DE MARKETING, O SETOR SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
DOS CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */
SELECT C.NOME, C.EMAIL,
        T.NUMERO AS CELULAR
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE
WHERE TIPO = 'CEL' AND ESTADO = 'RJ';

/* PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
 DAS MULHERES QUE MORAM NO ESTADO DE SÃO PAULO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */

SELECT C.NOME, C.EMAIL,
        T.NUMERO AS CELULAR
FROM CLIENTE AS C
    INNER JOIN ENDERECO AS E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE AS T
    ON C.IDCLIENTE = T.ID_CLIENTE
WHERE TIPO = 'CEL' 
AND ESTADO = 'SP'
AND SEXO = 'F';

/* IFNULL() */

SELECT C.NOME,
       IFNULL(C.EMAIL, '*******'),
       E.ESTADO,
       T.NUMERO
FROM CLIENTE C
    INNER JOIN ENDERECO E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE T
    ON C.IDCLIENTE = T.ID_CLIENTE;

/* CRIANDO UMA VIEW */

CREATE VIEW RELATORIO AS
SELECT C.NOME,
       IFNULL(C.EMAIL, '*******') AS EMAIL,
       E.ESTADO,
       T.NUMERO
FROM CLIENTE C
    INNER JOIN ENDERECO E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE T
    ON C.IDCLIENTE = T.ID_CLIENTE;

/* PARA VISUALIZAR AS VIEWS USO O SHOW TABLES */

/* APAGANDO UMA VIEW */

DROP VIEW RELATORIO;

/* INSERINDO UM PREFIXO PARA AJUDAR NA IDENTIFICAÇÃO DE VIEWS */
CREATE VIEW V_RELATORIO AS
SELECT C.NOME,
       IFNULL(C.EMAIL, '************') AS EMAIL,
       E.ESTADO,
       T.NUMERO
FROM CLIENTE C
    INNER JOIN ENDERECO E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE T
    ON C.IDCLIENTE = T.ID_CLIENTE;

/* A VIEW É UMA TABELA VIRTUAL E POSSO FAZER QUERYS EM CIMA DELA */
SELECT NOME, NUMERO, ESTADO
FROM V_RELATORIO;

/* FAZENDO UMA VIEW PARA UPDATE, INSERT E DELETE */
INSERT INTO V_RELATORIO VALUES(
    'ANDREIA', 'F', 'ANDREIA@UOL.COM.BR', 'CEL', '87654930', 'CENTRO', 'VITORIA', 'ES' 
);
/* NÃO É POSSÍVEL FAZER INSERT OU DELETE EM VIEWS COM JOIN, DÁ ERRO! */
/* ENTRETANTO É POSSÍVEL FAZER INSERT OU DELETE EM VIES SEM JOIN */
/* Error Code: 1394. Can not insert/delete into join view 'comercio.v_relatorio' without fields list */

/* ENTRETANTO É PERMITIDO FAZER UPDATES EM VIEWS COM JOIN */
UPDATE V_RELATORIO SET NOME = 'JOSE' WHERE NOME = 'JORGE';

/* TAMBEM É POSSIVEL FAZER PROJEÇÕES CONDICIONAIS USANDO VIEWS */
SELECT * FROM V_RELATORIO
WHERE SEXO = 'F';

/* ORDER BY - A UNICA FORMA DE ORDENAR UMA TABELA É COM O ORDER BY.
SEM ELE, O RESULTADO É ALEATORIO 
OBS.: A TABELA ALUNOS FOI CRIADA DENTRO DA DATABASE COMERCIO */

/* POSSO DETERMINAR A ORDENAÇÃO PELO NOME DA COLUNA */
SELECT * FROM ALUNOS
ORDER BY NUMERO;

/* POSSO DETERMINAR A ORDENAÇÃO PELO INDICE/NUMERO DA COLUNA */
SELECT * FROM ALUNOS
ORDER BY 1;

/* POSSO DETERMINAR A ORDENAÇÃO POR MAIS DE UMA COLUNA 
NESSE CASO PRIMEIRO ELE ORDENA O NUMERO DEPOIS OS NOMES */
SELECT * FROM ALUNOS
ORDER BY NUMERO, NOME;

SELECT * FROM ALUNOS
ORDER BY 1, 2;

/* ORDER BY DESC/ASC */
SELECT * FROM ALUNOS
ORDER BY 1 ASC;

SELECT * FROM ALUNOS
ORDER BY 1 DESC;

/* NO CASO ABAIXO ELE COLOCA APENAS O 2 EM ORDEM DECRESCENTE */
SELECT * FROM ALUNOS
ORDER BY 1, 2 DESC;

/* NO CASO ABAIXO ELE COLOCA AMBOS EM ORDEM DECRESCENTE */
SELECT * FROM ALUNOS
ORDER BY 1 DESC, 2 DESC;

/* ORDENANDO COM JOINS */
SELECT C.NOME,
       IFNULL(C.EMAIL, '************') AS EMAIL,
       E.ESTADO,
       T.NUMERO
FROM CLIENTE C
    INNER JOIN ENDERECO E
    ON C.IDCLIENTE = E.ID_CLIENTE
    INNER JOIN TELEFONE T
    ON C.IDCLIENTE = T.ID_CLIENTE
ORDER BY 1;

/* DELIMITER - ALTERAR O DELIMITER É NECESSÁRIO PARA QUE O BANCO 
NÃO PARE NO MEIO DA LEITURA DE UMA PROCEDURE */

STATUS
/* O DELIMITADOR PADRÃO É O ; */

DELIMITER $

/* STORED PROCEDURES */

SELECT 'MAFRA';

CREATE PROCEDURE NOME()
BEGIN

    QUALQUER PROGRAMAÇÃO

END
$

CREATE PROCEDURE NOME_EMPRESA()
BEGIN
    SELECT 'DATA UNIVERSITY' AS EMPRESA;
END
$

/* CHAMANDO UMA PROCEDURE */
CALL NOME_EMPRESA()$

/* APAGANDO UMA PROCEDURE */
DROP PROCEDURE NOME_EMPRESA()$

/* PROCEDURES COM PARAMETROS */
CREATE PROCEDURE SOMA(NUMERO1 INT, NUMERO2 INT)
BEGIN
    SELECT NUMERO1 + NUMERO2 AS SOMA;
END
$

/* PROCEDURES NO MUNDO REAL */
CREATE PROCEDURE INSERIR_CURSO(P_NOME VARCHAR(30),
                               P_HORAS INT,
                               P_VALOR FLOAT(10,2))
BEGIN
    INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_VALOR);
END
$

/* APOS CRIAR A PROCEDURE RECOMENDA-SE VOLTAR AO DELIMITER PADRÃO */
DELIMITER ;

CALL INSERIR_CURSO('BI SQL SERVER', 36, 3000.00);
CALL INSERIR_CURSO('POWER BI', 20, 1000.00);
CALL INSERIR_CURSO('TABLEAU', 30, 1200.00);
CALL INSERIR_CURSO('EXCEL', 30, 1000.00);
CALL INSERIR_CURSO('BIG DATA', 10, 700.00);
CALL INSERIR_CURSO('MACHINE LEARNING', 30, 1200.00);



/* PROCEDURE PARA CONSULTAR CURSOS */
CREATE PROCEDURE MOSTRAR_DADOS()
BEGIN
    SELECT * FROM CURSOS;
END
$

CALL MOSTRAR_DADOS();

CREATE TABLE VENDEDORES(
    IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXO CHAR(1),
    JANEIRO FLOAT(10, 2),
    FEVEREIRO FLOAT(10, 2),
    MARCO FLOAT(10, 2)
);

INSERT INTO VENDEDORES VALUES(NULL, 'CARLOS','M',1000.00,500.00,1500.00);
INSERT INTO VENDEDORES VALUES(NULL, 'RAQUEL','F',800.00,200.00,500.00);
INSERT INTO VENDEDORES VALUES(NULL, 'ANTONIO','M',1000.00,500.00,1500.00);
INSERT INTO VENDEDORES VALUES(NULL, 'CLARA','F',900.00,2500.00,500.00);
INSERT INTO VENDEDORES VALUES(NULL, 'ANDERSON','M',1200.00,2000.00,3500.00);
INSERT INTO VENDEDORES VALUES(NULL, 'IVONE','F',1000.00,1500.00,700.00);
INSERT INTO VENDEDORES VALUES(NULL, 'MARIA','F',3000.00,400.00,100.00);
INSERT INTO VENDEDORES VALUES(NULL, 'CELIA','F',1200.00,1100.00,300.00);

/* MAX() - TRAZ O VALOR MÁXIMO DE UMA COLUNA */
SELECT MAX(FEVEREIRO) AS MAIOR_FEVEREIRO FROM VENDEDORES;

/* MIN() - TRAZ O VALOR MÍNIMO DE UMA COLUNA */
SELECT MIN(FEVEREIRO) AS MENOR_FEVEREIRO FROM VENDEDORES;

/* AVG() - TRAZ O VALOR MÉDIO DE UMA COLUNA */
SELECT AVG(FEVEREIRO) AS MEDIA_FEVEREIRO FROM VENDEDORES;

/* USANDO VARIAS FUNCOES */
SELECT MAX(JANEIRO) AS MAX_JAN,
       MIN(JANEIRO) AS MIN_JAN,
       /* TRUNCATE() CONTROLA O Nº DE CASAS DECIMAIS NA QUERY */
       TRUNCATE(AVG(JANEIRO), 2) AS MEDIA_JAN
       FROM VENDEDORES;

/* SUM() MOSTRA A SOMA DOS VALORES DE UMA COLUNA */
SELECT SUM(JANEIRO) AS TOTAL_JAN,
       SUM(FEVEREIRO) AS TOTAL_FEV,
       SUM(MARCO) AS TOTAL_MAR
       FROM VENDEDORES;

/* SUBQUERIES */

/* VENDAS POR SEXO COM SUM() E GROUP BY */
SELECT SEXO, SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES
GROUP BY SEXO;

/* VENDEDOR QUE MENOS VENDEU EM MARÇO E SEU NOME */
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);
/* A QUERY DEPOIS DO IGUAL É CHAMADA DE INNER QUERY */
/* WHERE MARCO = 100 */

/* VENDEDOR QUE MAIS VENDEU EM MARÇO E SEU NOME */
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

/* QUEM VENDEU MAIS QUE O VALOR MEDIO DE FEVEREIRO */
SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

/* SOMANDO OS VALORES DAS LINHAS - VENDAS TOTAIS DE CADA VENDEDOR E MEDIA DE VENDAS DE CADA VENDEDOR */
SELECT NOME,
       JANEIRO,
       FEVEREIRO,
       MARCO,
       (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
       TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3, 2) AS "MEDIA"
       FROM VENDEDORES;

/* APLICANDO UMA % */
SELECT NOME,
       JANEIRO,
       FEVEREIRO,
       MARCO,
       (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
       (JANEIRO+FEVEREIRO+MARCO) * .25 AS "DESCONTO",
       TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3, 2) AS "MEDIA"
       FROM VENDEDORES;

/* ALTERANDO A ESTRUTURA DE UMA TABELA */
CREATE TABLE TABELA(
    COLUNA1 VARCHAR(30),
    COLUNA2 VARCHAR(30),
    COLUNA3 VARCHAR(30)
);

/* ADICIONANDO UMA PK */
ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1);

/* ADICIONANDO UMA COLUNA SEM ESPECIFICAR POSIÇÃO (POR DEFAULT VAI P/ FIM DA TABELA) */
ALTER TABLE TABELA
ADD COLUNA4 VARCHAR(30);

/* ADICIONANDO UMA COLUNA ESPECIFICANDO A POSIÇÃO */
ALTER TABLE TABELA
ADD COLUNA5 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA4;

/* MODIFICANDO O TIPO DE CAMPO */
ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL;

CREATE TABLE TIME(
    IDTIME INT PRIMARY KEY AUTO_INCREMENT,
    TIME VARCHAR(30),
    ID_PESSOA VARCHAR(30)
);

/* FOREIGN KEY */
ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

/* VERIFICAR AS CHAVES DE UMA TABELA - ESSE COMANDO MOSTRA UMA DESCRICAO MAIS DETALHADA DA TABELA */
SHOW CREATE TABLE TIME;

/* ORGANIZAÇÃO DE CHAVES - CONSTRAINT (REGRA) */

CREATE TABLE JOGADOR(
    IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30)
);

CREATE TABLE TIMES(
    IDTIME INT PRIMARY KEY AUTO_INCREMENT,
    NOMETIME VARCHAR(30),
    ID_JOGADOR INT, 
    FOREIGN KEY(ID_JOGADOR)
    REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL, "LIONEL MESSI");
INSERT INTO JOGADOR VALUES(NULL, "LUIZITO SUAREZ");

INSERT INTO TIMES VALUES(NULL, "BARCELONA", 1);
INSERT INTO TIMES VALUES(NULL, "ATLETICO DE MADRID", 2);

/* ORGANIZANDO CHAVES E AÇÕES DE CONSTRAINTS */
SHOW TABLES;

CREATE TABLE CLIENTE(
    IDCLIENTE INT,
    NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
    IDCLIENTE INT,
    TIPO CHAR(3) NOT NULL,
    NUMERO VARCHAR(30) NOT NULL,
    ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

/* DICIONARIO DE DADOS */
USE INFORMATION_SCHEMA;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
       TABLE_NAME AS "TABELA",
       CONSTRAINT_NAME AS "NOME_REGRA",
       CONSTRAINT_TYPE AS "TIPO"
       FROM TABLE_CONSTRAINTS
       WHERE CONSTRAINT_SCHEMA= "PROJETO";

/* APAGANDO CONSTRAINTS */
USE PROJETO;

ALTER TABLE TELEFONE 
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;
/* É INTERESSANTE FAZER UM DROP DA FK QUANDO
É NECESSÁRIO INSERIR MUITOS DADOS NAQUELA
TABELA. ISSO PARA EVITAR QUE O SISTEMA FAÇA
A CHECAGEM DE CADA REGISTRO NA TABELA PRINCIPAL 
APOS A INSERÇÃO INSERE-SE NOVAMENTE A FK */

/* O SISTEMA DO SEU JOSÉ - MEU SISTEMA */
CREATE TABLE CLIENTE(
    IDCLIENTE INT,
    NOME VARCHAR(50) NOT NULL,
    SEXO CHAR(1),
    CPF VARCHAR(11) NOT NULL
);

CREATE TABLE TELEFONE(
    IDTELEFONE INT,
    TIPO VARCHAR(3) NOT NULL,
    NUMERO VARCHAR(20) NOT NULL,
    ID_CLIENTE INT
);

CREATE TABLE CARRO(
    IDCARRO INT,
    MARCA VARCHAR(30),
    MODELO VARCHAR(30),
    PLACA VARCHAR(8),
    ID_CLIENTE INT
);

CREATE TABLE COR(
    IDCOR INT,
    DESCRICAO VARCHAR(30),
    ID_CARRO INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

INSERT INTO CLIENTE VALUES(1, "NILMAR PEREIRA", "M", "87656778698");
INSERT INTO CLIENTE VALUES(2, "FRANCISCO DAS CHAGAS", "M", "07428938387");
INSERT INTO CLIENTE VALUES(3, "JOAO DA SILVA", "M", "08128338578");

ALTER TABLE TELEFONE ADD CONSTRAINT PK_TELEFONE
PRIMARY KEY(IDTELEFONE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

INSERT INTO TELEFONE VALUES(1, "CEL", "(86)99567-4567", 1);
INSERT INTO TELEFONE VALUES(2, "RES", "(86)3214-5649", 1);
INSERT INTO TELEFONE VALUES(3, "CEL", "(86)98876-2134", 3);

ALTER TABLE CARRO ADD CONSTRAINT PK_CARRO
PRIMARY KEY(IDCARRO);

ALTER TABLE CARRO ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

INSERT INTO CARRO VALUES(1, "FORD", "ECOSPORT", "LVL-2345", 1);
INSERT INTO CARRO VALUES(2, "BMW", "328I", "NIC-1225", 2);
INSERT INTO CARRO VALUES(3, "TOYOTA", "SW4", "OUC-3243", 3);


ALTER TABLE COR ADD CONSTRAINT PK_COR
PRIMARY KEY(IDCOR);

ALTER TABLE COR ADD CONSTRAINT FK_CARRO_COR
FOREIGN KEY(ID_CARRO) REFERENCES CARRO(IDCARRO);

INSERT INTO COR VALUES(1, "VERMELHO", 1);
INSERT INTO COR VALUES(2, "BRANCO", 2);
INSERT INTO COR VALUES(3, "PRETO", 2);
INSERT INTO COR VALUES(4, "PRATA", 3);

/* FAZENDO UMA SELEÇÃO COM INNER JOIN */
SELECT C.NOME, C.SEXO, C.CPF,
       CA.MARCA, CA.MODELO
FROM CLIENTE AS C
    INNER JOIN CARRO AS CA
    ON C.IDCLIENTE = CA.ID_CLIENTE;



/* O SISTEMA DO SEU JOSÉ - SISTEMA DO MAFRA */
CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    SEXO ENUM('M', 'F') NOT NULL,
    ID_CARRO INT UNIQUE
    /* REPARE QUE A FK FICA AQUI, NESSE CONTEXTO ELA É A TABELA MAIS FRACA */
    /* TEM O UNIQUE PORQUE CADA CLIENTE SÓ PODE TER UM CARRO */
);

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
    TIPO ENUM('CEL','RES','COM') NOT NULL,
    NUMERO VARCHAR(30),
    ID_CLIENTE INT
    /* NÃO TEM O UNIQUE PORQUE CADA CLIENTE PODE TER MAIS DE UM TEL */
);

CREATE TABLE MARCA(
    IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) UNIQUE NOT NULL
);

CREATE TABLE CARRO(
    IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
    MODELO VARCHAR(30) NOT NULL,
    PLACA VARCHAR(30) NOT NULL UNIQUE,
    ID_MARCA INT
    /* ID_MARCA NÃO É UNIQUE PQ PODEMOS TER VARIOS CARROS DA MESMA MARCA */
);

CREATE TABLE COR(
    IDCOR INT PRIMARY KEY AUTO_INCREMENT,
    COR VARCHAR(30) UNIQUE
    /* A COR DEVE SER UNICA */
);

CREATE TABLE CARRO_COR(
    ID_CARRO INT,
    ID_COR INT,
    PRIMARY KEY(ID_CARRO, ID_COR)
    /* TABELAS ASSOCIATIVAS TEM UMA CHAVE PRIMARIA QUE É A UNIAO DOS DOIS ID DAS TABELAS ASSOCIADAS */
    /* ESSAS CHAVES TAMBEM SERÃO CHAVES ESTRANGEIRAS */
);

/* CONSTRAINTS */
ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY(ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY(ID_COR)
REFERENCES COR(IDCOR);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

/* EXERCICIO - INSERIR 10 CLIENTES NO BANCO */
INSERT INTO MARCA VALUES(NULL, "FORD");
INSERT INTO MARCA VALUES(NULL, "VOLKSWAGEN");
INSERT INTO MARCA VALUES(NULL, "FIAT");
INSERT INTO MARCA VALUES(NULL, "CHEVROLET");
INSERT INTO MARCA VALUES(NULL, "TOYOTA");
INSERT INTO MARCA VALUES(NULL, "HYUNDAI");


INSERT INTO CARRO VALUES(NULL, "ECOSPORT", "PIB-2373", 1);
INSERT INTO CARRO VALUES(NULL, "FIESTA", "OUI-3942", 1);
INSERT INTO CARRO VALUES(NULL, "KA", "OUJ-1453", 1);
INSERT INTO CARRO VALUES(NULL, "FOX", "PIC-3445", 2);
INSERT INTO CARRO VALUES(NULL, "JETTA", "OEI-1787", 2);
INSERT INTO CARRO VALUES(NULL, "ARGO", "LVL-8976", 3);
INSERT INTO CARRO VALUES(NULL, "ONIX", "NIC-8773", 4);
INSERT INTO CARRO VALUES(NULL, "HB20", "OUI-1243", 6);
INSERT INTO CARRO VALUES(NULL, "HB20", "NIK-3933", 6);
INSERT INTO CARRO VALUES(NULL, "CRETA", "OUC-3247", 6);

/* FAZENDO UM INNER JOIN ENTRE CARRO E MARCA */
SELECT C.MODELO, C.PLACA,
       M.NOME AS MARCA
FROM CARRO AS C
    INNER JOIN MARCA AS M
    ON M.IDMARCA = C.ID_MARCA;

INSERT INTO CLIENTE VALUES(NULL, "DAVID GILMOUR", "M", 5);
INSERT INTO CLIENTE VALUES(NULL, "ROGER WATERS", "M", 1);
INSERT INTO CLIENTE VALUES(NULL, "BRUCE DICKINSON", "M", 4);
INSERT INTO CLIENTE VALUES(NULL, "NICKO MACBRAIN", "M", 2);
INSERT INTO CLIENTE VALUES(NULL, "AXL ROSE", "M", 3);
INSERT INTO CLIENTE VALUES(NULL, "JANIS JOPLIN", "F", 6);
INSERT INTO CLIENTE VALUES(NULL, "AMY WINEHOUSE", "F", 7);
INSERT INTO CLIENTE VALUES(NULL, "AMY LEE", "F", 8);
INSERT INTO CLIENTE VALUES(NULL, "MADONNA", "F", 9);
INSERT INTO CLIENTE VALUES(NULL, "GIULIANNA ALBANO", "F", 10);

/* FAZENDO UM INNER JOIN ENTRE CLIENTE CARRO E MARCA */
SELECT CL.NOME, 
       CA.MODELO, CA.PLACA,
       M.NOME AS MARCA
FROM CLIENTE AS CL
    INNER JOIN CARRO AS CA
    ON CA.IDCARRO = CL.ID_CARRO
    INNER JOIN MARCA AS M
    ON M.IDMARCA = CA.ID_MARCA;

INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 1);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 2);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 3);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 4);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 5);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 6);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 7);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 8);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 9);
INSERT INTO TELEFONE VALUES(NULL, "CEL", "9876-9871", 10);

/* FAZENDO UM INNER JOIN ENTRE CLIENTE, TELEFONE CARRO E MARCA  */
SELECT CL.NOME,
       CA.MODELO, CA.PLACA,
       M.NOME AS MARCA,
       T.NUMERO
FROM CLIENTE AS CL
    INNER JOIN TELEFONE AS T
    ON CL.IDCLIENTE = T.ID_CLIENTE
    INNER JOIN CARRO AS CA
    ON CA.IDCARRO = CL.ID_CARRO
    INNER JOIN MARCA AS M
    ON M.IDMARCA = CA.ID_MARCA;

/* CRIANDO UMA VIEW COM A QUERY ACIMA */
CREATE VIEW V_RELATORIO AS
SELECT CL.NOME,
       CA.MODELO, CA.PLACA,
       M.NOME AS MARCA,
       T.NUMERO
FROM CLIENTE AS CL
    INNER JOIN TELEFONE AS T
    ON CL.IDCLIENTE = T.ID_CLIENTE
    INNER JOIN CARRO AS CA
    ON CA.IDCARRO = CL.ID_CARRO
    INNER JOIN MARCA AS M
    ON M.IDMARCA = CA.ID_MARCA;

/* AUTOMATIZANDO COM TRIGGERS */
/* ESTRUTURA BASICA DE UMA TRIGGER */
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO
    QUALQUER COMANDO SQL;
END -> FIM
$

CREATE TABLE USUARIO(
    IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30),
    SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDUSUARIO INT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30)
);

/* CRIANDO A TRIGGER */
/* NÃO POSSO FAZER DUAS TRIGGERS NO MESMO TEMPO NA MESMA TABELA
EX.: NÃO POSSO FAZER DUAS TRIGGERS BEFORE NA TABELA USUARIO */

DELIMITER $

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW 
BEGIN
    INSERT INTO BKP_USUARIO VALUES
    (NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
END
$

/* AO DELETAR UM USUARIO DA TABELA USUARIO,
AUTOMATICAMENTE A TRIGGER SERÁ DISPARADA
E AQUELE VALOR EXCLUIDO DE USUARIO IRÁ PARA
BKP_USUARIO */
DELETE FROM USUARIO WHERE IDUSUARIO = 1;

/* ACIMA FIZEMOS O BACKUP DENTRO DO MESMO BANCO,
MAS O CORRETO É FAZER O BACKUP EM OUTRO BANCO */
CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10, 2)
);

CREATE DATABASE BACKUP_LOJA;

USE BACKUP_LOJA;

CREATE TABLE BKP_PRODUTO(
    IDBKP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR FLOAT(10, 2)
);

/* PARA INSERIR DADOS EM UMA TABELA, ESTANDO EM OUTRO BANCO, USO O COMANDO ABAIXO */
INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(NULL,1000,"TESTE",0.0);

SELECT * FROM BACKUP_LOJA.BKP_PRODUTO;

/* QUERO FAZER UM TRIGGER PARA, SEMPRE QUE INSERIR UM VALOR NA TABELA PRODUTO,
ESSE VALOR TAMBEM SER INSERIDO NA TABELA BACKUP_PRODUTO DO BANCO BACKUP_LOJA */

DELIMITER $

CREATE TRIGGER BACKUP
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
    NEW.NOME,NEW.VALOR);
END
$

/* COMO ESTOU FAZENDO UM INSERT NA TABELA PRODUTO, O VALOR É NOVO, PORTANTO USO NEW */

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,"NOTEBOOK",1000.00);

/* OBS.: AO INSERIR, O VALOR DO IDPRODUTO FICA 0 PORQUE O VALOR É NOVO E
SEU ID AINDA NÃO ESTÁ NA TABELA DE DESTINO. O CORRETO É USAR AFTER, POIS
PRIMEIRO O DADO SERA INSERIDO NA TABELA DE DESTINO E DEPOIS PARA O BACKUP */

DROP TRIGGER BACKUP;

DELIMITER $

CREATE TRIGGER BACKUP
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
    NEW.NOME,NEW.VALOR);
END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,"LIVRO C#",100.00);

/* AQUI ESTOU ADICIONANDO UMA COLUNA CHAMADA EVENTO, NA TABELA BKP_PRODUTO */
ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
ADD EVENTO CHAR(1);


DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON LOJA.PRODUTO
FOR EACH ROW 
BEGIN
    INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES
    (NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D');
END
$

/* AGORA SEMPRE QUE DELETAR UM PRODUTO IRA APARECER UM D NA TABELA DE BACKUP */
DELETE FROM PRODUTO WHERE IDPRODUTO = 1;

SELECT * FROM BACKUP_LOJA.BKP_PRODUTO;

/* TRIGGER DE AUDITORIA */

DROP DATABASE LOJA;

DROP DATABASE BACKUP_LOJA;

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10, 2)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10, 2)
);

/* QUANDO */
SELECT NOW();

/* QUEM */
SELECT CURRENT_USER();

CREATE TABLE BKP_PRODUTO(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR_ORIGINAL FLOAT(10,2),
    VALOR_ALTERADO FLOAT(10,2),
    DATA DATETIME,
    USUARIO VARCHAR(30),
    EVENTO CHAR(1)
);

/* CRIANDO UMA TRIGGER PARA AUDITAR ALTERAÇÕES */

DELIMITER $

CREATE TRIGGER AUDIT_PRODUTO
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,
    OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');
END
$

DELIMITER ;

UPDATE PRODUTO SET VALOR = 110.00
WHERE IDPRODUTO = 4;

/* AUTORELACIONAMENTO */

CREATE TABLE CURSOS(
    IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    HORAS INT,
    VALOR FLOAT(10,2),
    ID_PREREQ INT
    /* OS CURSOS QUE NÃO TEM PREREQ FICARÃO RECEBERÃO O ID_PREREQ -> NULL */
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,"LOGICA DE PROGRAMAÇÃO",40,350.00,NULL);
INSERT INTO CURSOS VALUES(NULL,"INTRODUÇÃO À COMPUTAÇÃO",30,250.00,NULL);
INSERT INTO CURSOS VALUES(NULL,"POO",40,350.00,1);
INSERT INTO CURSOS VALUES(NULL,"ESTRUTURA DE DADOS",30,250.00,1);

SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ, "SEM_REQ") PREREQ
FROM CURSOS;

/* NOME, VALOR, HORAS E NOME DO PRE REQUISITO */
SELECT 
C.NOME AS CURSO, 
C.VALOR AS VALOR, 
C.HORAS AS CARGA, 
IFNULL(P.NOME, "---") AS PREREQ
FROM CURSOS AS C
/* CURSO ATUAL */
LEFT JOIN CURSOS AS P
/* CURSO PRE REQ */
ON P.IDCURSO = C.ID_PREREQ;
/* O LEFT JOIN TRAZ TODOS OS CURSOS, INCLUSIVE OS QUE NÃO TEM PREREQUISITOS */

/* CURSORES */
CREATE DATABASE CURSORES;

USE CURSORES;

CREATE TABLE VENDEDORES(
    IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(50),
    JAN INT,
    FEV INT,
    MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL, "MAFRA", 20, 10, 40);
INSERT INTO VENDEDORES VALUES(NULL, "JOAO", 30, 35, 43);
INSERT INTO VENDEDORES VALUES(NULL, "CLARA", 29, 13, 46);
INSERT INTO VENDEDORES VALUES(NULL, "CELIA", 25, 16, 47);
INSERT INTO VENDEDORES VALUES(NULL, "MARCOS", 21, 12, 46);
INSERT INTO VENDEDORES VALUES(NULL, "BUENO", 23, 15, 48);

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;

SELECT NOME, (JAN+FEV+MAR) AS TOTAL, (JAN+FEV+MAR)/ 3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VENDAS_TOTAIS(
    NOME VARCHAR(50),
    JAN INT,
    FEV INT,
    MAR INT,
    TOTAL INT,
    MEDIA INT
);

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN
    DECLARE FIM INT DEFAULT 0;
    DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
    DECLARE VNOME VARCHAR(50);

    DECLARE REGISTRO CURSOR FOR(
        SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
    );

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;

    OPEN REGISTRO;

    REPEAT
        FETCH REGISTRO INTO VNOME, VAR1, VAR2, VAR3;
        IF NOT FIM THEN
            SET VTOTAL = VAR1 + VAR2 + VAR3;
            SET VMEDIA = VTOTAL/3;

            INSERT INTO VENDAS_TOTAIS VALUES(VNOME, VAR1, VAR2, VAR3, VTOTAL, VMEDIA);
        END IF;
    UNTIL FIM END REPEAT;

    CLOSE REGISTRO; 

END
$

/* SEGUNDA E TERCEIRA FORMAS NORMAIS */

/*
    PRIMEIRA FN:
    ATOMICIDADE - UM CAMPO NÃO PODE SER DIVISÍVEL
    UM CAMPO NÃO PODE SER VETORIZADO
    TENHO QUE TER UM CHAVE PRIMÁRIA

    SEGUNDA FN:
    CAMPO NÃO CHAVE DEPENDE DA EXISTENCIA DA TOTALIDADE DAS CHAVES

    TERCEIRA FN (DEPENDENCIA TRANSITIVA):
    CAMPOS NÃO CHAVE QUE DEPENDEM DE OUTROS CAMPOS NÃO CHAVE VIRAM OUTRA TABELA

*/

CREATE DATABASE CONSULTORIO;

CREATE TABLE PACIENTE(
    IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXO CHAR(1),
    EMAIL VARCHAR(30),
    NASCIMENTO DATE
);

CREATE TABLE MEDICO(
    IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXO CHAR(1),
    ESPECIALIDADE VARCHAR(30),
    FUNCIONARIO ENUM('S', 'N')
);

CREATE TABLE HOSPITAL(
    IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    BAIRRO VARCHAR(30),
    CIDADE VARCHAR(30),
    ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
    IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
    ID_PACIENTE INT,
    ID_MEDICO INT,
    ID_HOSPITAL INT,
    DATA DATETIME,
    DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
    IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
    ENTRADA DATETIME,
    QUARTO INT,
    SAIDA DATETIME,
    OBSERVACOES VARCHAR(50),
    ID_CONSULTA INT UNIQUE
);

/* CRIANDO AS CONSTRAINTS */

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);